//
// app.post('/image/:userid', async (req, res) => {...});
//
// Uploads an image to the bucket and updates the database,
// returning the asset id assigned to this image.
//
const dbConnection = require('./database.js')
const { PutObjectCommand } = require('@aws-sdk/client-s3');
const { s3, s3_bucket_name, s3_region_name } = require('./aws.js');

const uuid = require('uuid');
const { promisify } = require('util');

// /image/:userid
exports.post_image = async (req, res) => {

  console.log("call to /image...");

  try {
    var data = req.body;  // data => JS object
    var userid = req.params.userid;

    // data = {
    // "assetname": "...",
    // "data": "..."
    // }

    const assetname = data["assetname"];

    console.log(userid);
    console.log(data);

    // 0. promisify the query function first
    const query_func = promisify(dbConnection.query).bind(dbConnection);

    // 1. assuming the data is in base64 and needs to be decoded with Buffer.from(S, 'base64')
    const decoded = Buffer.from(data['data'], 'base64');
    // console.log(decoded);

    // 2. look for the bucketfolder of userid in users table in MySQL
    try {
      const sql = `SELECT bucketfolder FROM users WHERE userid = ?`;
      console.log('Start querying ...');
      var result = await query_func(sql, [userid]);  // has to use var to make it function-level instead of block-level for const/let
      console.log('Finish querying');
    } catch (sql_err) {
      console.error('SQL Error:', sql_err);
      res.status(400).json({
        "message": "no such user...",
        "assetid": -1
      });
      return;
    }
    console.log(result);

    if (result.length == 0) {
      res.status(400).json({
        "message": "no such user...",
        "assetid": -1
      });
      return;
    }
    const bucketfolder = result[0].bucketfolder;
    console.log(bucketfolder);

    // 3. bucketkey is a folder name generated by a uuid random number under the parent folder bucketfolder
    const bucketkey = bucketfolder + '/' + uuid.v4();
    console.log(bucketkey);

    // 4. insert one asset into assets table with the new image uploaded (assetid, userid, assetname, bucketkey), where assetid is auto-incremented by our database, bucketkey, assetname
    try {
      const sql = `INSERT INTO assets (userid, assetname, bucketkey) VALUES (?, ?, ?);`;
      var result = await query_func(sql, [userid, assetname, bucketkey]);
      console.log('Updating ...');
      console.log(result);
      assetid = result.insertId;
      if (result.affectedRows != 1) {
        console.log("Warning! # of rows affected is not 1, but ", result);
        return;
      }
    } catch (sql_err) {
      console.error('SQL Error:', sql_err);
      res.status(400).json({
        "message": sql_err.message,
        "assetid": -1
      });
      return;
    }

    // 5. upload to s3 with a file path as bucketkey
    try {
      const command = new PutObjectCommand({ Bucket: s3_bucket_name, Key: bucketkey, Body: decoded });
      const obj = await s3.send(command);
      console.log(obj);
      res.json({
        "message": "success",
        "assetid": assetid
      });
    } catch (s3_err) {
      res.status(400).json({
        "message": s3_err.message,
        "assetid": -1
      });
    }


  }//try
  catch (err) {
    console.log("**ERROR:", err.message);

    res.status(400).json({
      "message": "some sort of error message",
      "assetid": -1
    });
  }//catch

}//post
